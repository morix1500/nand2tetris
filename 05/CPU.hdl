// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode
    And16(a=instruction, b=true, out[0..2]=j, out[3..5]=d, out[6..11]=c, out[12]=a, out[13..14]=false, out[15]=i);
    DMux8Way(in=true, sel=d, a=isnull, b=m1, c=d1, d=m2, d=d2, e=a1, f=a2, f=m3, g=a3, g=d3, h=a4, h=m4, h=d4);
    Or8Way(a=m1, b=m2, c=m3, d=m4, e=false, f=false, g=false, h=false, out=writeM);
    Or8Way(a=a1, b=a2, c=a3, d=a4, e=false, f=false, g=false, h=false, out=writeD);
    Or8Way(a=d1, b=d2, c=d3, d=d4, e=false, f=false, g=false, h=false, out=writeA);

    // instruction or out[t-1]
    Mux16(a=instruction, b=outm2, sel=i, out=v1);

    // A
    Register(in=v1, load=writeA, out=v2, out[0..14]=addressM);

    // A or memory
    Mux16(a=v2, b=inM, sel=a, out=v3);

    // D
    Register(in=outm2, load=writeD, out=v4);

    // ALU
    ALU(x=v4, y=v3, zx=c[0], nx=c[1], zy=c[2], ny=c[3], f=c[4], no=c[5], out=out, out=outm2, zr=zr, ng=ng);

    // PC
    PC(in=v2, load=i, inc=XXXXXX, reset=reset, out[0..14]=pc, out[15]=false);

}
