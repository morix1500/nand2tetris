// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
    // i  -  -  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    DMux8Way(in=true, sel[0]=instruction[3], sel[1]=instruction[4], sel[2]=instruction[5], a=isnull, b=m1, c=d1, d=m2, d=d2, e=a1, f=a2, f=m3, g=a3, g=d3, h=a4, h=m4, h=d4);
    Or8Way(in[0]=m1, in[1]=m2, in[2]=m3, in[3]=m4, in[4]=false, in[5]=false, in[6]=false, in[7]=false, out=writeMtmp);
    Or8Way(in[0]=a1, in[1]=a2, in[2]=a3, in[3]=a4, in[4]=false, in[5]=false, in[6]=false, in[7]=false, out=writeA);
    Or8Way(in[0]=d1, in[1]=d2, in[2]=d3, in[3]=d4, in[4]=false, in[5]=false, in[6]=false, in[7]=false, out=writeD);
    //And(a=writeMtmp, b=writeD, out=writeM);

    // instruction or out[t-1]
    Mux16(a=instruction, b=outm2, sel=instruction[15], out=v1);

    // A
    Not(in=instruction[15], out=tmpa);
    Or(a=tmpa, b=writeA, out=loada);
    ARegister(in=v1, load=loada, out=v2, out[0..14]=addressM); // y

    // A or memory
    Mux16(a=v2, b=inM, sel=instruction[12], out=v3); // x
    And(a=writeMtmp, b=instruction[15], out=writeM);

    // D
    DRegister(in=outm2, load=writeD, out=v4);

    // ALU
    ALU(x=v4, y=v3, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outm2, zr=zr, ng=ng);

    // PC
    Or(a=zr, b=ng, out=tmp);
    Not(in=tmp, out=sei);
    And(a=instruction[0], b=sei, out=j3);
    And(a=instruction[1], b=zr,  out=j2);
    And(a=instruction[2], b=ng,  out=j1);
    Or8Way(in[0]=j1, in[1]=j2, in[2]=j3, in[3]=false, in[4]=false, in[5]=false, in[6]=false, in[7]=false, out=loadpc);
    Not(in=loadpc, out=isinc);
    Or(a=loada, b=isinc, out=isinc2);
    Mux(a=loadpc, b=false, sel=loada, out=loadpc2);
    PC(in=v2, load=loadpc2, inc=isinc2, reset=reset, out[0..14]=pc, out[15]=false);

}
